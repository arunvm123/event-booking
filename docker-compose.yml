version: '3.8'

services:
  # Infrastructure Services
  postgres:
    image: postgres:15
    container_name: eventbooking-postgres
    environment:
      POSTGRES_DB: eventbooking
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - eventbooking-network

  redis:
    image: redis:7-alpine
    container_name: eventbooking-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - eventbooking-network

  # Kafka Services
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: eventbooking-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - eventbooking-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: eventbooking-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - eventbooking-network

  # Application Services
  user-service:
    build:
      context: .
      dockerfile: user-service/Dockerfile
    container_name: eventbooking-user-service
    environment:
      PORT: "8081"
      DB_USER: "postgres"
      DB_PASSWORD: "postgres"
      DB_NAME: "eventbooking"
      DB_HOST: "postgres"
      DB_PORT: "5432"
      DB_SSL_MODE: "disable"
      JWT_SECRET: "shared-jwt-secret-change-in-production"
    ports:
      - "8081:8081"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - eventbooking-network

  event-service:
    build:
      context: .
      dockerfile: event-service/Dockerfile
    container_name: eventbooking-event-service
    environment:
      PORT: "8082"
      DB_USER: "postgres"
      DB_PASSWORD: "postgres"
      DB_NAME: "eventbooking"
      DB_HOST: "postgres"
      DB_PORT: "5432"
      DB_SSL_MODE: "disable"
      JWT_SECRET: "shared-jwt-secret-change-in-production"
      REDIS_HOST: "redis"
      REDIS_PORT: "6379"
      REDIS_PASSWORD: ""
      REDIS_DB: "0"
    ports:
      - "8082:8082"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - eventbooking-network

  booking-service-api:
    build:
      context: .
      dockerfile: booking-service/Dockerfile.api
    container_name: eventbooking-booking-service-api
    environment:
      PORT: "8083"
      DB_USER: "postgres"
      DB_PASSWORD: "postgres"
      DB_NAME: "eventbooking"
      DB_HOST: "postgres"
      DB_PORT: "5432"
      DB_SSL_MODE: "disable"
      JWT_SECRET: "shared-jwt-secret-change-in-production"
      REDIS_HOST: "redis"
      REDIS_PORT: "6379"
      REDIS_PASSWORD: ""
      REDIS_DB: "0"
      KAFKA_BROKERS: "kafka:29092"
      EVENT_SERVICE_URL: "http://event-service:8082"
    ports:
      - "8083:8083"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      event-service:
        condition: service_started
    restart: unless-stopped
    networks:
      - eventbooking-network

  booking-service-worker:
    build:
      context: .
      dockerfile: booking-service/Dockerfile.worker
    container_name: eventbooking-booking-service-worker
    environment:
      DB_USER: "postgres"
      DB_PASSWORD: "postgres"
      DB_NAME: "eventbooking"
      DB_HOST: "postgres"
      DB_PORT: "5432"
      DB_SSL_MODE: "disable"
      JWT_SECRET: "shared-jwt-secret-change-in-production"
      REDIS_HOST: "redis"
      REDIS_PORT: "6379"
      REDIS_PASSWORD: ""
      REDIS_DB: "0"
      KAFKA_BROKERS: "kafka:29092"
      EVENT_SERVICE_URL: "http://event-service:8082"
      WORKER_MAX_WORKERS: "20"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      event-service:
        condition: service_started
      booking-service-api:
        condition: service_started
    restart: unless-stopped
    networks:
      - eventbooking-network

  notification-service-api:
    build:
      context: .
      dockerfile: notification-service/Dockerfile.api
    container_name: eventbooking-notification-service-api
    environment:
      PORT: "8084"
      DB_USER: "postgres"
      DB_PASSWORD: "postgres"
      DB_NAME: "eventbooking"
      DB_HOST: "postgres"
      DB_PORT: "5432"
      DB_SSL_MODE: "disable"
      JWT_SECRET: "shared-jwt-secret-change-in-production"
      KAFKA_BROKERS: "kafka:29092"
    ports:
      - "8084:8084"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - eventbooking-network

  notification-service-worker:
    build:
      context: .
      dockerfile: notification-service/Dockerfile.worker
    container_name: eventbooking-notification-service-worker
    environment:
      DB_USER: "postgres"
      DB_PASSWORD: "postgres"
      DB_NAME: "eventbooking"
      DB_HOST: "postgres"
      DB_PORT: "5432"
      DB_SSL_MODE: "disable"
      JWT_SECRET: "shared-jwt-secret-change-in-production"
      KAFKA_BROKERS: "kafka:29092"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      notification-service-api:
        condition: service_started
    restart: unless-stopped
    networks:
      - eventbooking-network

volumes:
  postgres_data:
  redis_data:

networks:
  eventbooking-network:
    driver: bridge
